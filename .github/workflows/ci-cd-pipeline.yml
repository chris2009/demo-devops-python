name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11.3'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install coverage

      - name: Run Unit Tests with Coverage
        run: |
          coverage run manage.py test api

      - name: Generate Coverage Report
        run: |
          coverage xml

      - name: Static Code Analysis
        uses: github/super-linter@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Code Coverage
        uses: codecov/codecov-action@v1
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  build-and-push-docker-image:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t testdevopsmiapp.azurecr.io/my-devops-app:${{ github.sha }} .
          docker push testdevopsmiapp.azurecr.io/my-devops-app:${{ github.sha }}

  deploy-to-aks:
    needs: build-and-push-docker-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Azure CLI aks-preview extension
        run: az extension add --name aks-preview

      - name: Get AKS credentials
        run: az aks get-credentials --resource-group ${{ secrets.RESOURCE_GROUP }} --name ${{ secrets.CLUSTER_NAME }} --file kubeconfig --overwrite-existing

      - name: Set KUBECONFIG
        run: echo "KUBECONFIG=${PWD}/kubeconfig" >> "$GITHUB_ENV"

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Install traceroute
        run: sudo apt-get update && sudo apt-get install traceroute -y

      - name: Run traceroute
        run: traceroute devops-test-s11yfujo.hcp.eastus.azmk8s.io

      - name: Despliegue en AKS
        run: kubectl apply -f deploy/kubernetes-deployment.yml --validate=false